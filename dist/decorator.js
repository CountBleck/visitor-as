import { PathTransformVisitor, mergeTransformer } from "./transformer.js";
import { decorates, not, isStdlib } from "./utils.js";
export function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
export class TopLevelDecorator extends PathTransformVisitor {
    static _visitor;
    static registerVisitor(visitor) {
        TopLevelDecorator._visitor = visitor;
    }
    get visitor() {
        return TopLevelDecorator._visitor;
    }
    visitDecoratorNode(node) {
        if (this.visitor.decoratorMatcher(node)) {
            this.visitor.currentPath = this.currentParentPath;
            this.visitor.visit(this.currentParent);
        }
    }
    afterParse(_) {
        mergeTransformer(this, this.visitor);
        this.visit(this.program.sources.filter(this.visitor.sourceFilter));
    }
}
export class Decorator extends PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return not(isStdlib);
    }
    get decoratorMatcher() {
        return (node) => decorates(node, this.name);
    }
    get name() { return ""; }
    getDecorator(node) {
        return node.decorators && node.decorators.find(this.decoratorMatcher) || null;
    }
}
export class ClassDecorator extends Decorator {
}
export class FunctionDecorator extends Decorator {
}
export class VariableDecorator extends Decorator {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVkxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFdEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFNBQTJCO0lBQzNELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFPRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsb0JBQW9CO0lBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQW1CO0lBRTFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBeUI7UUFDOUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQixnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBRUY7QUFFRCxNQUFNLE9BQWdCLFNBQVUsU0FBUSxvQkFBb0I7SUFDMUQ7O09BRUc7SUFDSCxJQUFJLFlBQVk7UUFDZCxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVELENBQUM7SUFFRCxJQUFJLElBQUksS0FBYSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFakMsWUFBWSxDQUFDLElBQTBCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDaEYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFnQixjQUFlLFNBQVEsU0FBUztDQUlyRDtBQUVELE1BQU0sT0FBZ0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUVELE1BQU0sT0FBZ0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhUcmFuc2Zvcm1WaXNpdG9yLCBtZXJnZVRyYW5zZm9ybWVyIH0gZnJvbSBcIi4vdHJhbnNmb3JtZXIuanNcIjtcbmltcG9ydCB7XG4gIENsYXNzRGVjbGFyYXRpb24sXG4gIEZpZWxkRGVjbGFyYXRpb24sXG4gIE1ldGhvZERlY2xhcmF0aW9uLFxuICBQYXJzZXIsXG4gIFZhcmlhYmxlRGVjbGFyYXRpb24sXG4gIEZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gIFNvdXJjZSxcbiAgRGVjb3JhdG9yTm9kZSxcbiAgRGVjbGFyYXRpb25TdGF0ZW1lbnQsXG59IGZyb20gXCJhc3NlbWJseXNjcmlwdC9kaXN0L2Fzc2VtYmx5c2NyaXB0LmpzXCI7XG5pbXBvcnQgeyBkZWNvcmF0ZXMsIG5vdCwgaXNTdGRsaWIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IoZGVjb3JhdG9yOiBEZWNvcmF0b3JWaXNpdG9yKSB7XG4gIFRvcExldmVsRGVjb3JhdG9yLnJlZ2lzdGVyVmlzaXRvcihkZWNvcmF0b3IpO1xuICByZXR1cm4gVG9wTGV2ZWxEZWNvcmF0b3I7XG59XG5cbmludGVyZmFjZSBEZWNvcmF0b3JWaXNpdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xuICBkZWNvcmF0b3JNYXRjaGVyOiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gYm9vbGVhbjtcbiAgc291cmNlRmlsdGVyOiAoczogU291cmNlKSA9PiBib29sO1xufVxuXG5leHBvcnQgY2xhc3MgVG9wTGV2ZWxEZWNvcmF0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XG4gIHByaXZhdGUgc3RhdGljIF92aXNpdG9yOiBEZWNvcmF0b3JWaXNpdG9yO1xuXG4gIHN0YXRpYyByZWdpc3RlclZpc2l0b3IodmlzaXRvcjogRGVjb3JhdG9yVmlzaXRvcik6IHZvaWQge1xuICAgIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9yID0gdmlzaXRvcjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHZpc2l0b3IoKTogRGVjb3JhdG9yVmlzaXRvciB7XG4gICAgcmV0dXJuIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9yO1xuICB9XG5cbiAgdmlzaXREZWNvcmF0b3JOb2RlKG5vZGU6IERlY29yYXRvck5vZGUpIHtcbiAgICBpZiAodGhpcy52aXNpdG9yLmRlY29yYXRvck1hdGNoZXIobm9kZSkpIHtcbiAgICAgIHRoaXMudmlzaXRvci5jdXJyZW50UGF0aCA9IHRoaXMuY3VycmVudFBhcmVudFBhdGg7XG4gICAgICB0aGlzLnZpc2l0b3IudmlzaXQodGhpcy5jdXJyZW50UGFyZW50KTtcbiAgICB9XG4gIH1cblxuICBhZnRlclBhcnNlKF86IFBhcnNlcik6IHZvaWQge1xuICAgIG1lcmdlVHJhbnNmb3JtZXIodGhpcywgdGhpcy52aXNpdG9yKTtcbiAgICB0aGlzLnZpc2l0KHRoaXMucHJvZ3JhbS5zb3VyY2VzLmZpbHRlcih0aGlzLnZpc2l0b3Iuc291cmNlRmlsdGVyKSk7XG4gIH1cblxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVjb3JhdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xuICAvKipcbiAgICogRGVmYXVsdCBmaWx0ZXIgdGhhdCByZW1vdmVzIGxpYnJhcnkgZmlsZXNcbiAgICovXG4gIGdldCBzb3VyY2VGaWx0ZXIoKTogKHM6IFNvdXJjZSkgPT4gYm9vbCB7XG4gICAgcmV0dXJuIG5vdChpc1N0ZGxpYik7XG4gIH1cblxuICBnZXQgZGVjb3JhdG9yTWF0Y2hlcigpOiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gYm9vbGVhbiB7XG4gICAgcmV0dXJuIChub2RlOiBEZWNvcmF0b3JOb2RlKSA9PiBkZWNvcmF0ZXMobm9kZSwgdGhpcy5uYW1lKVxuICB9XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHsgcmV0dXJuIFwiXCI7IH1cblxuICBnZXREZWNvcmF0b3Iobm9kZTogRGVjbGFyYXRpb25TdGF0ZW1lbnQpOiBEZWNvcmF0b3JOb2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIG5vZGUuZGVjb3JhdG9ycyAmJiBub2RlLmRlY29yYXRvcnMuZmluZCh0aGlzLmRlY29yYXRvck1hdGNoZXIpIHx8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENsYXNzRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcbiAgYWJzdHJhY3QgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkO1xuICBhYnN0cmFjdCB2aXNpdE1ldGhvZERlY2xhcmF0aW9uKG5vZGU6IE1ldGhvZERlY2xhcmF0aW9uKTogdm9pZDtcbiAgYWJzdHJhY3QgdmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25EZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xuICBhYnN0cmFjdCB2aXNpdEZ1bmN0aW9uRGVjbGFyYXRpb24obm9kZTogRnVuY3Rpb25EZWNsYXJhdGlvbik6IHZvaWQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYXJpYWJsZURlY29yYXRvciBleHRlbmRzIERlY29yYXRvciB7XG4gIGFic3RyYWN0IHZpc2l0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlOiBWYXJpYWJsZURlY2xhcmF0aW9uKTogdm9pZDtcbn1cbiJdfQ==